;; Analyzed by ClojureScript 1.8.34
{:use-macros nil, :excludes #{}, :name taoensso.sente.interfaces, :imports nil, :requires {enc taoensso.encore, taoensso.encore taoensso.encore}, :uses nil, :defs {->EdnPacker {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 61, :column 10, :end-line 61, :end-column 19, :protocols #{taoensso.sente.interfaces/IPacker}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{taoensso.sente.interfaces/IPacker}, :name taoensso.sente.interfaces/->EdnPacker, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, pack {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 58, :column 4, :end-line 58, :end-column 8, :protocol taoensso.sente.interfaces/IPacker, :doc nil, :arglists (quote ([_ x]))}, :protocol taoensso.sente.interfaces/IPacker, :name taoensso.sente.interfaces/pack, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 8, :method-params ([_ x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ x])), :doc nil}, sch-send! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([server-ch msg] [server-ch msg close-after-send?])), :doc "Sends a message to server channel. Returns true iff the channel was open\n   when called.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([server-ch msg] [server-ch msg close-after-send?]), :arglists ([server-ch msg] [server-ch msg close-after-send?]), :arglists-meta (nil nil)}}, :name taoensso.sente.interfaces/sch-send!, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([server-ch msg] [server-ch msg close-after-send?]), :arglists ([server-ch msg] [server-ch msg close-after-send?]), :arglists-meta (nil nil)}, :method-params ([server-ch msg] [server-ch msg close-after-send?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists ([server-ch msg] [server-ch msg close-after-send?]), :doc "Sends a message to server channel. Returns true iff the channel was open\n   when called."}, IServerChan {:meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 20, :column 14, :end-line 20, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {sch-open? [[server-ch]], sch-close! [[server-ch]], -sch-send! [[server-ch msg close-after-send?]]}}}, :protocol-symbol true, :name taoensso.sente.interfaces/IServerChan, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 25, :column 1, :line 20, :protocol-info {:methods {sch-open? [[server-ch]], sch-close! [[server-ch]], -sch-send! [[server-ch msg close-after-send?]]}}, :info nil, :end-line 20, :impls #{}, :doc nil, :jsdoc ("@interface")}, coerce-packer {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 68, :column 7, :end-line 68, :end-column 20, :arglists (quote ([x]))}, :name taoensso.sente.interfaces/coerce-packer, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, edn-packer {:name taoensso.sente.interfaces/edn-packer, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 66, :column 1, :end-line 66, :end-column 16, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 66, :column 6, :end-line 66, :end-column 16}, :doc "Default Edn packer"}, EdnPacker {:num-fields 0, :protocols #{taoensso.sente.interfaces/IPacker}, :name taoensso.sente.interfaces/EdnPacker, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 19, :type true, :column 10, :line 61, :record false, :end-line 61, :skip-protocol-flag nil}, unpack {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 59, :column 4, :end-line 59, :end-column 10, :protocol taoensso.sente.interfaces/IPacker, :doc nil, :arglists (quote ([_ x]))}, :protocol taoensso.sente.interfaces/IPacker, :name taoensso.sente.interfaces/unpack, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 10, :method-params ([_ x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ x])), :doc nil}, IPacker {:meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 55, :column 14, :end-line 55, :end-column 21, :doc "Extension pt. for client<->server comms data un/packers:\n  arbitrary Clojure data <-> serialized strings.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {pack [[_ x]], unpack [[_ x]]}}}, :protocol-symbol true, :name taoensso.sente.interfaces/IPacker, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 21, :column 1, :line 55, :protocol-info {:methods {pack [[_ x]], unpack [[_ x]]}}, :info nil, :end-line 55, :impls #{taoensso.sente.interfaces/EdnPacker}, :doc "Extension pt. for client<->server comms data un/packers:\n  arbitrary Clojure data <-> serialized strings.", :jsdoc ("@interface")}, ring-req->server-ch-resp {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 40, :column 4, :end-line 40, :end-column 28, :protocol taoensso.sente.interfaces/IServerChanAdapter, :doc "Given a Ring request (WebSocket handshake or Ajax GET/POST), returns a Ring\n    response map with a web-server-specific channel :body that implements\n    Sente's IServerChan protocol.\n\n    Configures channel callbacks with a callbacks map using keys:\n      :on-open  - (fn [server-ch]) called exactly once after channel is\n                  available for sending.\n      :on-close - (fn [server-ch status]) called exactly once after channel is\n                  closed for ANY cause, incl. a call to `close!`.\n      :on-msg   - (fn [server-ch msg]) called for each String or byte[] message\n                  received from client. Currently only used for WebSocket clients.", :arglists (quote ([server-ch-adapter ring-req callbacks-map]))}, :protocol taoensso.sente.interfaces/IServerChanAdapter, :name taoensso.sente.interfaces/ring-req->server-ch-resp, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 28, :method-params ([server-ch-adapter ring-req callbacks-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([server-ch-adapter ring-req callbacks-map])), :doc "Given a Ring request (WebSocket handshake or Ajax GET/POST), returns a Ring\n    response map with a web-server-specific channel :body that implements\n    Sente's IServerChan protocol.\n\n    Configures channel callbacks with a callbacks map using keys:\n      :on-open  - (fn [server-ch]) called exactly once after channel is\n                  available for sending.\n      :on-close - (fn [server-ch status]) called exactly once after channel is\n                  closed for ANY cause, incl. a call to `close!`.\n      :on-msg   - (fn [server-ch msg]) called for each String or byte[] message\n                  received from client. Currently only used for WebSocket clients."}, sch-close! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 24, :column 4, :end-line 24, :end-column 14, :protocol taoensso.sente.interfaces/IServerChan, :doc "Closes the server channel and returns true iff the channel was open when\n    called.", :arglists (quote ([server-ch]))}, :protocol taoensso.sente.interfaces/IServerChan, :name taoensso.sente.interfaces/sch-close!, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 14, :method-params ([server-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([server-ch])), :doc "Closes the server channel and returns true iff the channel was open when\n    called."}, -sch-send! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 27, :column 4, :end-line 27, :end-column 14, :protocol taoensso.sente.interfaces/IServerChan, :doc "Sends a message to server channel. Returns true iff the channel was open\n    when called.", :arglists (quote ([server-ch msg close-after-send?]))}, :protocol taoensso.sente.interfaces/IServerChan, :name taoensso.sente.interfaces/-sch-send!, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 14, :method-params ([server-ch msg close-after-send?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([server-ch msg close-after-send?])), :doc "Sends a message to server channel. Returns true iff the channel was open\n    when called."}, sch-open? {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 23, :column 4, :end-line 23, :end-column 13, :protocol taoensso.sente.interfaces/IServerChan, :doc "Returns true iff the server channel is currently open", :arglists (quote ([server-ch]))}, :protocol taoensso.sente.interfaces/IServerChan, :name taoensso.sente.interfaces/sch-open?, :variadic false, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 13, :method-params ([server-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([server-ch])), :doc "Returns true iff the server channel is currently open"}, IServerChanAdapter {:meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente/interfaces.cljs", :line 37, :column 14, :end-line 37, :end-column 32, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {ring-req->server-ch-resp [[server-ch-adapter ring-req callbacks-map]]}}}, :protocol-symbol true, :name taoensso.sente.interfaces/IServerChanAdapter, :file "resources/public/js/devcards/taoensso/sente/interfaces.cljs", :end-column 32, :column 1, :line 37, :protocol-info {:methods {ring-req->server-ch-resp [[server-ch-adapter ring-req callbacks-map]]}}, :info nil, :end-line 37, :impls #{}, :doc nil, :jsdoc ("@interface")}}, :require-macros {enc taoensso.encore, taoensso.encore taoensso.encore}, :cljs.analyzer/constants {:seen #{:edn}, :order [:edn]}, :doc "Alpha, subject to change.\n  Public interfaces / extension points."}