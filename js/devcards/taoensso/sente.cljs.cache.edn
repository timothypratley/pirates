;; Analyzed by ClojureScript 1.8.34
{:use-macros {warnf taoensso.timbre, go cljs.core.async.macros, have taoensso.encore, go-loop cljs.core.async.macros, have! taoensso.encore, have? taoensso.encore, debugf taoensso.timbre, tracef taoensso.timbre, infof taoensso.timbre, errorf taoensso.timbre}, :excludes #{}, :name taoensso.sente, :imports nil, :requires {timbre taoensso.timbre, interfaces taoensso.sente.interfaces, async cljs.core.async, taoensso.sente.interfaces taoensso.sente.interfaces, cljs.core.async cljs.core.async, enc taoensso.encore, taoensso.timbre taoensso.timbre, str clojure.string, clojure.string clojure.string, taoensso.encore taoensso.encore}, :uses {<! cljs.core.async, swap-in! taoensso.encore, chan cljs.core.async, format taoensso.encore, swapped taoensso.encore, reset-in! taoensso.encore, >! cljs.core.async, put! cljs.core.async}, :defs {assert-send-args {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 650, :column 8, :end-line 650, :end-column 24, :private true, :arglists (quote ([x ?timeout-ms ?cb]))}, :private true, :name taoensso.sente/assert-send-args, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 24, :method-params ([x ?timeout-ms ?cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x ?timeout-ms ?cb]))}, map->ChAjaxSocket {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 868, :column 12, :end-line 868, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__42126]))}, :name taoensso.sente/map->ChAjaxSocket, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 24, :method-params ([G__42126]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 868, :end-line 868, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__42126]))}, as-event {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 105, :column 7, :end-line 105, :end-column 15, :arglists (quote ([x]))}, :name taoensso.sente/as-event, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, server-event-msg? {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 131, :column 7, :end-line 131, :end-column 24, :arglists (quote ([x]))}, :name taoensso.sente/server-event-msg?, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, send-buffered-server-evs>ws-clients! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 573, :column 8, :end-line 573, :end-column 44, :private true, :arglists (quote ([conns_ uid buffered-evs-pstr])), :doc "Actually pushes buffered events (as packed-str) to all uid's WebSocket conns."}, :private true, :name taoensso.sente/send-buffered-server-evs>ws-clients!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 44, :method-params ([conns_ uid buffered-evs-pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 573, :end-line 573, :max-fixed-arity 3, :fn-var true, :arglists (quote ([conns_ uid buffered-evs-pstr])), :doc "Actually pushes buffered events (as packed-str) to all uid's WebSocket conns."}, pack {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 191, :column 8, :end-line 191, :end-column 12, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name taoensso.sente/pack, :variadic true, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, chsk-send! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 640, :column 7, :end-line 640, :end-column 17, :arglists (quote ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts])), :doc "Sends `[ev-id ev-?data :as event]`, returns true on apparent success.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists-meta (nil nil nil)}}, :name taoensso.sente/chsk-send!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists-meta (nil nil nil)}, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 640, :end-line 640, :max-fixed-arity 4, :fn-var true, :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :doc "Sends `[ev-id ev-?data :as event]`, returns true on apparent success."}, validate-event {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 94, :column 8, :end-line 94, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name taoensso.sente/validate-event, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, event? {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 103, :column 7, :end-line 103, :end-column 13, :arglists (quote ([x])), :doc "Valid [ev-id ?ev-data] form?"}, :name taoensso.sente/event?, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Valid [ev-id ?ev-data] form?"}, event-msg? {:name taoensso.sente/event-msg?, :file "resources/public/js/devcards/taoensso/sente.cljs", :line 1213, :column 1, :end-line 1213, :end-column 16, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1213, :column 6, :end-line 1213, :end-column 16}}, make-channel-socket! {:name taoensso.sente/make-channel-socket!, :file "resources/public/js/devcards/taoensso/sente.cljs", :line 1215, :column 1, :end-line 1215, :end-column 26, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1215, :column 6, :end-line 1215, :end-column 26}}, make-channel-socket-server! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 224, :column 7, :end-line 224, :end-column 34, :arglists (quote ([web-server-adapter & [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}]])), :doc "Takes a web server adapter[1] and returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n    :send-fn ; (fn [user-id ev] for server>user push.\n    :ajax-post-fn                ; (fn [ring-req]) for Ring CSRF-POST + chsk URL.\n    :ajax-get-or-ws-handshake-fn ; (fn [ring-req]) for Ring GET + chsk URL.\n    :connected-uids ; Watchable, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n\n  Common options:\n    :user-id-fn        ; (fn [ring-req]) -> unique user-id for server>user push.\n    :csrf-token-fn     ; (fn [ring-req]) -> CSRF token for Ajax POSTs.\n    :handshake-data-fn ; (fn [ring-req]) -> arb user data to append to handshake evs.\n    :send-buf-ms-ajax  ; [2]\n    :send-buf-ms-ws    ; [2]\n    :packer            ; :edn (default), or an IPacker implementation (experimental).\n\n  [1] e.g. `taoensso.sente.server-adapters.http-kit/http-kit-adapter` or\n           `taoensso.sente.server-adapters.immutant/immutant-adapter`.\n      You must have the necessary web-server dependency in your project.clj and\n      the necessary entry in your namespace's `ns` form.\n\n  [2] Optimization to allow transparent batching of rapidly-triggered\n      server>user pushes. This is esp. important for Ajax clients which use a\n      (slow) reconnecting poller. Actual event dispatch may occur <= given ms\n      after send call (larger values => larger batch windows).", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(web-server-adapter [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}])], :arglists ([web-server-adapter & [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}]]), :arglists-meta (nil)}}, :name taoensso.sente/make-channel-socket-server!, :variadic true, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(web-server-adapter [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}])], :arglists ([web-server-adapter & [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}]]), :arglists-meta (nil)}, :method-params [(web-server-adapter [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists ([web-server-adapter & [{:keys [recv-buf-or-n send-buf-ms-ajax send-buf-ms-ws user-id-fn csrf-token-fn handshake-data-fn packer], :or {recv-buf-or-n (async/sliding-buffer 1000), send-buf-ms-ajax 100, send-buf-ms-ws 30, user-id-fn (fn [ring-req] (get-in ring-req [:session :uid])), csrf-token-fn (fn [ring-req] (or (get-in ring-req [:session :csrf-token]) (get-in ring-req [:session :ring.middleware.anti-forgery/anti-forgery-token]) (get-in ring-req [:session "__anti-forgery-token"]))), handshake-data-fn (fn [ring-req] nil), packer :edn}}]]), :doc "Takes a web server adapter[1] and returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n    :send-fn ; (fn [user-id ev] for server>user push.\n    :ajax-post-fn                ; (fn [ring-req]) for Ring CSRF-POST + chsk URL.\n    :ajax-get-or-ws-handshake-fn ; (fn [ring-req]) for Ring GET + chsk URL.\n    :connected-uids ; Watchable, read-only (atom {:ws #{_} :ajax #{_} :any #{_}}).\n\n  Common options:\n    :user-id-fn        ; (fn [ring-req]) -> unique user-id for server>user push.\n    :csrf-token-fn     ; (fn [ring-req]) -> CSRF token for Ajax POSTs.\n    :handshake-data-fn ; (fn [ring-req]) -> arb user data to append to handshake evs.\n    :send-buf-ms-ajax  ; [2]\n    :send-buf-ms-ws    ; [2]\n    :packer            ; :edn (default), or an IPacker implementation (experimental).\n\n  [1] e.g. `taoensso.sente.server-adapters.http-kit/http-kit-adapter` or\n           `taoensso.sente.server-adapters.immutant/immutant-adapter`.\n      You must have the necessary web-server dependency in your project.clj and\n      the necessary entry in your namespace's `ns` form.\n\n  [2] Optimization to allow transparent batching of rapidly-triggered\n      server>user pushes. This is esp. important for Ajax clients which use a\n      (slow) reconnecting poller. Actual event dispatch may occur <= given ms\n      after send call (larger values => larger batch windows)."}, ajax-lite {:name taoensso.sente/ajax-lite, :file "resources/public/js/devcards/taoensso/sente.cljs", :line 630, :column 8, :end-line 630, :end-column 22, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 630, :column 13, :end-line 630, :end-column 22}, :doc "Alias of `taoensso.encore/ajax-lite`"}, get-chsk-url {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1001, :column 8, :end-line 1001, :end-column 20, :private true, :arglists (quote ([protocol chsk-host chsk-path type]))}, :private true, :name taoensso.sente/get-chsk-url, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 20, :method-params ([protocol chsk-host chsk-path type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1001, :end-line 1001, :max-fixed-arity 4, :fn-var true, :arglists (quote ([protocol chsk-host chsk-path type]))}, -chsk-send! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 634, :column 4, :end-line 634, :end-column 15, :protocol taoensso.sente/IChSocket, :doc "Implementation detail", :arglists (quote ([chsk ev opts]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/-chsk-send!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 15, :method-params ([chsk ev opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 634, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chsk ev opts])), :doc "Implementation detail"}, start-client-chsk-router! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1203, :column 7, :end-line 1203, :end-column 32, :arglists (quote ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]])), :doc "Creates a go-loop to call `(event-msg-handler <client-event-msg>)` and\n  returns a `(fn stop! [])`. Catches & logs errors.\n\n  Advanced users may instead prefer to write their own loop against `ch-recv`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}}, :name taoensso.sente/start-client-chsk-router!, :variadic true, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1203, :end-line 1203, :max-fixed-arity 2, :fn-var true, :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :doc "Creates a go-loop to call `(event-msg-handler <client-event-msg>)` and\n  returns a `(fn stop! [])`. Catches & logs errors.\n\n  Advanced users may instead prefer to write their own loop against `ch-recv`."}, chsk-destroy! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 635, :column 4, :end-line 635, :end-column 17, :protocol taoensso.sente/IChSocket, :doc "DEPRECATED: Please use `chsk-disconnect!` instead", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-destroy!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 17, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 635, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "DEPRECATED: Please use `chsk-disconnect!` instead"}, ->ChAjaxSocket {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 868, :column 12, :end-line 868, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([client-id chs params packer url state_ timeout-ms ajax-opts curr-xhr_ active-retry-id_ backoff-ms-fn]))}, :name taoensso.sente/->ChAjaxSocket, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 24, :method-params ([client-id chs params packer url state_ timeout-ms ajax-opts curr-xhr_ active-retry-id_ backoff-ms-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 868, :end-line 868, :max-fixed-arity 11, :fn-var true, :arglists (quote ([client-id chs params packer url state_ timeout-ms ajax-opts curr-xhr_ active-retry-id_ backoff-ms-fn]))}, send-buffered-server-evs>ajax-clients! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 580, :column 8, :end-line 580, :end-column 46, :private true, :arglists (quote ([conns_ uid buffered-evs-pstr & [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}]])), :doc "Actually pushes buffered events (as packed-str) to all uid's Ajax conns.\n  Allows some time for possible Ajax poller reconnects.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(conns_ uid buffered-evs-pstr [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}])], :arglists ([conns_ uid buffered-evs-pstr & [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}]]), :arglists-meta (nil)}}, :private true, :name taoensso.sente/send-buffered-server-evs>ajax-clients!, :variadic true, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 46, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(conns_ uid buffered-evs-pstr [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}])], :arglists ([conns_ uid buffered-evs-pstr & [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}]]), :arglists-meta (nil)}, :method-params [(conns_ uid buffered-evs-pstr [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 580, :end-line 580, :max-fixed-arity 3, :fn-var true, :arglists ([conns_ uid buffered-evs-pstr & [{:keys [nmax-attempts ms-base ms-rand], :or {nmax-attempts 7, ms-base 90, ms-rand 90}}]]), :doc "Actually pushes buffered events (as packed-str) to all uid's Ajax conns.\n  Allows some time for possible Ajax poller reconnects."}, ChAjaxSocket {:num-fields 11, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChAjaxSocket, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 24, :type true, :column 12, :internal-ctor true, :line 868, :record true, :end-line 868, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, set-logging-level! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1241, :column 7, :end-line 1241, :end-column 25, :arglists (quote ([level])), :doc "DEPRECATED. Please use `timbre/set-level!` instead."}, :name taoensso.sente/set-logging-level!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 25, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1241, :end-line 1241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :doc "DEPRECATED. Please use `timbre/set-level!` instead."}, start-chsk-router! {:name taoensso.sente/start-chsk-router!, :file "resources/public/js/devcards/taoensso/sente.cljs", :line 1219, :column 1, :end-line 1219, :end-column 24, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1219, :column 6, :end-line 1219, :end-column 24}}, put-server-event-msg>ch-recv! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 150, :column 8, :end-line 150, :end-column 37, :private true, :arglists (quote ([ch-recv {:as ev-msg, :keys [event ?reply-fn]}])), :doc "All server `event-msg`s go through this"}, :private true, :name taoensso.sente/put-server-event-msg>ch-recv!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 37, :method-params ([ch-recv p__41543]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch-recv {:as ev-msg, :keys [event ?reply-fn]}])), :doc "All server `event-msg`s go through this"}, pack* {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 179, :column 8, :end-line 179, :end-column 13, :private true, :arglists (quote ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid])), :doc "clj->prefixed-pstr", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists-meta (nil nil)}}, :private true, :name taoensso.sente/pack*, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists-meta (nil nil)}, :method-params ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 4, :fn-var true, :arglists ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :doc "clj->prefixed-pstr"}, -chsk-connect! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 633, :column 4, :end-line 633, :end-column 18, :protocol taoensso.sente/IChSocket, :doc "Implementation detail", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/-chsk-connect!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 18, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 633, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Implementation detail"}, receive-buffered-evs! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 702, :column 8, :end-line 702, :end-column 29, :private true, :arglists (quote ([chs clj]))}, :private true, :name taoensso.sente/receive-buffered-evs!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 29, :method-params ([chs clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 702, :end-line 702, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chs clj]))}, -start-chsk-router! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1163, :column 8, :end-line 1163, :end-column 27, :private true, :arglists (quote ([server? ch-recv event-msg-handler opts]))}, :private true, :name taoensso.sente/-start-chsk-router!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 27, :method-params ([server? ch-recv event-msg-handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1163, :end-line 1163, :max-fixed-arity 4, :fn-var true, :arglists (quote ([server? ch-recv event-msg-handler opts]))}, cb-error? {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 163, :column 14, :end-line 163, :end-column 23, :arglists (quote ([cb-reply-clj]))}, :name taoensso.sente/cb-error?, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 23, :method-params ([cb-reply-clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb-reply-clj]))}, unpack {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 196, :column 8, :end-line 196, :end-column 14, :private true, :arglists (quote ([packer prefixed-pstr])), :doc "prefixed-pstr->[clj ?cb-uuid]"}, :private true, :name taoensso.sente/unpack, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 14, :method-params ([packer prefixed-pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([packer prefixed-pstr])), :doc "prefixed-pstr->[clj ?cb-uuid]"}, chsk-disconnect! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 636, :column 4, :end-line 636, :end-column 20, :protocol taoensso.sente/IChSocket, :doc "Disconnects channel socket", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-disconnect!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 20, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Disconnects channel socket"}, default-chsk-url-fn {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1250, :column 6, :end-line 1250, :end-column 25}, :name taoensso.sente/default-chsk-url-fn, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 25, :method-params ([path p__42675 websocket?]), :protocol-impl nil, :arglists-meta (), :column 1, :line 1250, :end-line 1250, :max-fixed-arity 3, :fn-var true, :arglists nil, :doc "DEPRECATED"}, start-chsk-router-loop! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1234, :column 7, :end-line 1234, :end-column 30, :arglists (quote ([event-handler ch-recv])), :doc "DEPRECATED: Please use `start-chsk-router!` instead."}, :name taoensso.sente/start-chsk-router-loop!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 30, :method-params ([event-handler ch-recv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1234, :end-line 1234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event-handler ch-recv])), :doc "DEPRECATED: Please use `start-chsk-router!` instead."}, ajax-call {:name taoensso.sente/ajax-call, :file "resources/public/js/devcards/taoensso/sente.cljs", :line 1246, :column 1, :end-line 1246, :end-column 15, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1246, :column 6, :end-line 1246, :end-column 15}, :doc "DEPRECATED: Please use `ajax-lite` instead."}, handle-when-handshake! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 710, :column 8, :end-line 710, :end-column 30, :private true, :arglists (quote ([chsk chs clj]))}, :private true, :name taoensso.sente/handle-when-handshake!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 30, :method-params ([chsk chs clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 710, :end-line 710, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chsk chs clj]))}, ChWebSocket {:num-fields 14, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChWebSocket, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 737, :record true, :end-line 737, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, pull-unused-cb-fn! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 660, :column 8, :end-line 660, :end-column 26, :private true, :arglists (quote ([cbs-waiting_ ?cb-uuid]))}, :private true, :name taoensso.sente/pull-unused-cb-fn!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 26, :method-params ([cbs-waiting_ ?cb-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 660, :end-line 660, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cbs-waiting_ ?cb-uuid]))}, assert-event {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 107, :column 7, :end-line 107, :end-column 19, :arglists (quote ([x]))}, :name taoensso.sente/assert-event, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, chsk-reconnect! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 637, :column 4, :end-line 637, :end-column 19, :protocol taoensso.sente/IChSocket, :doc "Reconnects channel socket (useful for reauthenticating after login/logout, etc.)", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-reconnect!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 19, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 637, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Reconnects channel socket (useful for reauthenticating after login/logout, etc.)"}, make-channel-socket-client! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1007, :column 7, :end-line 1007, :end-column 34, :arglists (quote ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]])), :doc "Returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n             ; May `put!` (inject) arbitrary `event`s to this channel.\n    :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n    :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n    :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n  Common options:\n    :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto)\n    :host           ; Server host (defaults to current page's host)\n    :params         ; Map of any params to incl. in chsk Ring requests (handy for\n                    ; application-level auth, etc.)\n    :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity w/in given\n                    ; number of milliseconds\n    :lp-timeout-ms  ; Ping to keep a long-polling (Ajax) conn alive '' [1]\n    :packer         ; :edn (default), or an IPacker implementation (experimental)\n    :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`\n    :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n\n  [1] If you're using Immutant and override the default :lp-timeout-ms, you'll\n      need to provide the same timeout value to\n      `taoensso.sente.server-adapters.immutant/make-immutant-adapter` and use\n      the result of that function as the web server adapter to your server-side\n      `make-channel-socket-server!`.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts])], :arglists ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]]), :arglists-meta (nil)}}, :name taoensso.sente/make-channel-socket-client!, :variadic true, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts])], :arglists ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]]), :arglists-meta (nil)}, :method-params [(path [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1007, :end-line 1007, :max-fixed-arity 1, :fn-var true, :arglists ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]]), :doc "Returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n             ; May `put!` (inject) arbitrary `event`s to this channel.\n    :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n    :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n    :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n  Common options:\n    :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto)\n    :host           ; Server host (defaults to current page's host)\n    :params         ; Map of any params to incl. in chsk Ring requests (handy for\n                    ; application-level auth, etc.)\n    :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity w/in given\n                    ; number of milliseconds\n    :lp-timeout-ms  ; Ping to keep a long-polling (Ajax) conn alive '' [1]\n    :packer         ; :edn (default), or an IPacker implementation (experimental)\n    :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`\n    :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n\n  [1] If you're using Immutant and override the default :lp-timeout-ms, you'll\n      need to provide the same timeout value to\n      `taoensso.sente.server-adapters.immutant/make-immutant-adapter` and use\n      the result of that function as the web server adapter to your server-side\n      `make-channel-socket-server!`."}, with-?meta {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 178, :column 8, :end-line 178, :end-column 18, :private true, :arglists (quote ([x ?m]))}, :private true, :name taoensso.sente/with-?meta, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 18, :method-params ([x ?m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ?m]))}, cb-chan-as-fn {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 687, :column 8, :end-line 687, :end-column 21, :private true, :arglists (quote ([?cb ev])), :doc "Experimental, undocumented. Allows a core.async channel to be provided\n  instead of a cb-fn. The channel will receive values of form\n  [<event-id>.cb <reply>]."}, :private true, :name taoensso.sente/cb-chan-as-fn, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 21, :method-params ([?cb ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 2, :fn-var true, :arglists (quote ([?cb ev])), :doc "Experimental, undocumented. Allows a core.async channel to be provided\n  instead of a cb-fn. The channel will receive values of form\n  [<event-id>.cb <reply>]."}, IChSocket {:meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 632, :column 14, :end-line 632, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-chsk-connect! [[chsk]], -chsk-send! [[chsk ev opts]], chsk-destroy! [[chsk]], chsk-disconnect! [[chsk]], chsk-reconnect! [[chsk]]}}}, :protocol-symbol true, :name taoensso.sente/IChSocket, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 23, :column 1, :line 632, :protocol-info {:methods {-chsk-connect! [[chsk]], -chsk-send! [[chsk ev opts]], chsk-destroy! [[chsk]], chsk-disconnect! [[chsk]], chsk-reconnect! [[chsk]]}}, :info nil, :end-line 632, :impls #{taoensso.sente/ChWebSocket taoensso.sente/ChAjaxSocket}, :doc nil, :jsdoc ("@interface")}, cb-success? {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 164, :column 14, :end-line 164, :end-column 25, :arglists (quote ([cb-reply-clj]))}, :name taoensso.sente/cb-success?, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 25, :method-params ([cb-reply-clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb-reply-clj]))}, ->ChWebSocket {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 737, :column 12, :end-line 737, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([client-id chs params packer url state_ cbs-waiting_ socket_ kalive-ms kalive-timer_ kalive-due?_ backoff-ms-fn active-retry-id_ retry-count_]))}, :name taoensso.sente/->ChWebSocket, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 23, :method-params ([client-id chs params packer url state_ cbs-waiting_ socket_ kalive-ms kalive-timer_ kalive-due?_ backoff-ms-fn active-retry-id_ retry-count_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 737, :end-line 737, :max-fixed-arity 14, :fn-var true, :arglists (quote ([client-id chs params packer url state_ cbs-waiting_ socket_ kalive-ms kalive-timer_ kalive-due?_ backoff-ms-fn active-retry-id_ retry-count_]))}, start-server-chsk-router! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 1195, :column 7, :end-line 1195, :end-column 32, :arglists (quote ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]])), :doc "Creates a go-loop to call `(event-msg-handler <server-event-msg>)` and\n  returns a `(fn stop! [])`. Catches & logs errors.\n\n  Advanced users may instead prefer to write their own loop against `ch-recv`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}}, :name taoensso.sente/start-server-chsk-router!, :variadic true, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1195, :end-line 1195, :max-fixed-arity 2, :fn-var true, :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :doc "Creates a go-loop to call `(event-msg-handler <server-event-msg>)` and\n  returns a `(fn stop! [])`. Catches & logs errors.\n\n  Advanced users may instead prefer to write their own loop against `ch-recv`."}, client-event-msg? {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 120, :column 7, :end-line 120, :end-column 24, :arglists (quote ([x]))}, :name taoensso.sente/client-event-msg?, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, map->ChWebSocket {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 737, :column 12, :end-line 737, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__42066]))}, :name taoensso.sente/map->ChWebSocket, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 23, :method-params ([G__42066]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 737, :end-line 737, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__42066]))}, unpack* {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 171, :column 8, :end-line 171, :end-column 15, :private true, :arglists (quote ([packer pstr])), :doc "pstr->clj"}, :private true, :name taoensso.sente/unpack*, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 15, :method-params ([packer pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([packer pstr])), :doc "pstr->clj"}, merge>chsk-state! {:protocol-inline nil, :meta {:file "/Users/timothypratley/git/pirates/resources/public/js/devcards/taoensso/sente.cljs", :line 666, :column 8, :end-line 666, :end-column 25, :private true, :arglists (quote ([{:keys [chs state_], :as chsk} merge-state]))}, :private true, :name taoensso.sente/merge>chsk-state!, :variadic false, :file "resources/public/js/devcards/taoensso/sente.cljs", :end-column 25, :method-params ([p__42025 merge-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 666, :end-line 666, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [chs state_], :as chsk} merge-state]))}}, :require-macros {asyncm cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, enc taoensso.encore, taoensso.encore taoensso.encore, timbre taoensso.timbre, taoensso.timbre taoensso.timbre}, :cljs.analyzer/constants {:seen #{:curr-xhr_ :chsk/closed :?reply-fn :ws-kalive-ms :ajax-post-fn :ms-base :on-msg :flush? :cb :send-buf-ms-ws :first-open? :taoensso.sente/nil-uid :nmax-attempts ajax-opts cbs-waiting_ :ws :get :lp-timeout-ms :chsk/recv :client-uuid :handshake :ch-recv :malformed-event :adjusted-protocol kalive-timer_ :requested-reconnect-pending? :client-id state_ :X-CSRF-Token timeout-ms :kalive-ms :csrf-token-fn :?content :else :disconnected :on-close :sente/all-users-without-uid :protocol :wrong-id-type :newly-connected :connected-uids curr-xhr_ :_ :method :pathname :uid :trace-evs? :packer :chs :warn :server :chsk/ws-ping :trace :chsk/uidport-open :swap/dissoc client-id :handshake? :params :chsk/close :recur :type kalive-ms :chsk/state :unnamespaced-id :debug :state :ajax :send-buf-ms-ajax :retry-count_ :chsk/bad-event :requested-reconnect? :non-handshake packer chs :chsk/bad-package :ajax-get-or-ws-handshake-fn :headers :internal :error-handler :chsk/error :handshake-data-fn :host params :event :backoff-ms-fn :wrong-type :websocket? :user-id-fn :recv-buf-or-n :socket_ retry-count_ :ppstr :id :open? :edn :chsk/uidport-close :chsk-url-fn :url :active-retry-id_ :lp-timeout :ring-req :chsk/timeout :handled :wrap-recv-evs? :?data :post :close-after-send :chsk :csrf-token :f :error :kalive-due?_ :send-fn :wrong-length :ms-rand :timeout :resp-type backoff-ms-fn :ajax-opts :cbs-waiting_ socket_ :ring.middleware.anti-forgery/anti-forgery-token :auto active-retry-id_ :on-open :kalive-timer_ url :timeout-ms :chsk/handshake :apparent-success :?error :newly-disconnected :state_ :ajax-cb :any :chsk/dummy-cb-200 :<server kalive-due?_ :session :text}, :order [:wrong-type :wrong-length :else :wrong-id-type :unnamespaced-id :chsk/bad-event :malformed-event :ch-recv :state :event :id :?data :send-fn :?reply-fn :client-id :connected-uids :uid :ring-req :warn :f :auto :chsk/closed :chsk/error :chsk/timeout :debug :chsk/bad-package :ajax-cb :trace :recv-buf-or-n :send-buf-ms-ajax :send-buf-ms-ws :user-id-fn :session :csrf-token-fn :csrf-token :ring.middleware.anti-forgery/anti-forgery-token :handshake-data-fn :packer :edn :ws :ajax :any :taoensso.sente/nil-uid :newly-connected :newly-disconnected :flush? :sente/all-users-without-uid :chsk/close :recur :ajax-post-fn :ajax-get-or-ws-handshake-fn :on-open :params :ppstr :close-after-send :chsk/dummy-cb-200 :websocket? :chsk/handshake :error :on-msg :on-close :chsk/uidport-open :handshake? :swap/dissoc :chsk/uidport-close :disconnected :nmax-attempts :ms-base :ms-rand :timeout-ms :cb :chs :state_ :requested-reconnect-pending? :open? :requested-reconnect? :<server :handshake :non-handshake :internal :handled :url :cbs-waiting_ :socket_ :kalive-ms :kalive-timer_ :kalive-due?_ :backoff-ms-fn :active-retry-id_ :retry-count_ :apparent-success :chsk/ws-ping client-id chs params packer url state_ cbs-waiting_ socket_ kalive-ms kalive-timer_ kalive-due?_ backoff-ms-fn active-retry-id_ retry-count_ :ajax-opts :curr-xhr_ :method :resp-type :headers :post :text :X-CSRF-Token :_ :?error :?content :timeout :get timeout-ms ajax-opts curr-xhr_ :ws-kalive-ms :lp-timeout-ms :client-uuid :type :host :wrap-recv-evs? :lp-timeout :protocol :pathname :first-open? :chsk/state :chsk/recv :chsk-url-fn :chsk :trace-evs? :error-handler :server :adjusted-protocol]}, :doc "Channel sockets. Otherwise known as The Shiz.\n\n      Protocol  | client>server | client>server ?+ ack/reply | server>user push\n    * WebSockets:       ✓              [1]                           ✓\n    * Ajax:            [2]              ✓                           [3]\n\n    [1] Emulate with cb-uuid wrapping\n    [2] Emulate with dummy-cb wrapping\n    [3] Emulate with long-polling\n\n  Abbreviations:\n    * chsk      - Channel socket (Sente's own pseudo \"socket\")\n    * server-ch - Underlying web server's async channel that implement Sente's\n                  server channel interface\n    * sch       - server-ch alias\n    * uid       - User-id. An application-level user identifier used for async\n                  push. May have semantic meaning (e.g. username, email address),\n                  may not (e.g. client/random id) - app's discretion.\n    * cb        - Callback\n    * tout      - Timeout\n    * ws        - WebSocket/s\n    * pstr      - Packed string. Arbitrary Clojure data serialized as a string\n                  (e.g. edn) for client<->server comms.\n\n  Special messages:\n    * Callback wrapping: [<clj> <?cb-uuid>] for [1],[2]\n    * Callback replies: :chsk/closed, :chsk/timeout, :chsk/error\n    * Client-side events:\n        [:chsk/handshake [<?uid> <?csrf-token> <?handshake-data>]],\n        [:chsk/state <new-state>],\n        [:chsk/recv <[buffered-evs]>] ; server>user push\n\n    * Server-side events:\n        [:chsk/ws-ping],\n        [:chsk/bad-package <packed-str>],\n        [:chsk/bad-event   <chsk-event>],\n        [:chsk/uidport-open],\n        [:chsk/uidport-close].\n\n  Notable implementation details:\n    * core.async is used liberally where brute-force core.async allows for\n      significant implementation simplifications. We lean on core.async's strong\n      efficiency here.\n    * For WebSocket fallback we use long-polling rather than HTTP 1.1 streaming\n      (chunked transfer encoding). Http-kit _does_ support chunked transfer\n      encoding but a small minority of browsers &/or proxies do not. Instead of\n      implementing all 3 modes (WebSockets, streaming, long-polling) - it seemed\n      reasonable to focus on the two extremes (performance + compatibility). In\n      any case client support for WebSockets is growing rapidly so fallback\n      modes will become increasingly irrelevant while the extra simplicity will\n      continue to pay dividends.\n\n  General-use notes:\n    * Single HTTP req+session persists over entire chsk session but cannot\n      modify sessions! Use standard a/sync HTTP Ring req/resp for logins, etc.\n    * Easy to wrap standard HTTP Ring resps for transport over chsks. Prefer\n      this approach to modifying handlers (better portability)."}